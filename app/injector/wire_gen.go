// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/BuildWithYou/fetroshop-api/app"
	"github.com/BuildWithYou/fetroshop-api/app/connection"
	postgres2 "github.com/BuildWithYou/fetroshop-api/app/domain/customer_accesses/postgres"
	"github.com/BuildWithYou/fetroshop-api/app/domain/customers/postgres"
	postgres3 "github.com/BuildWithYou/fetroshop-api/app/domain/user_accesses/postgres"
	postgres4 "github.com/BuildWithYou/fetroshop-api/app/domain/users/postgres"
	"github.com/BuildWithYou/fetroshop-api/app/helper/confighelper"
	"github.com/BuildWithYou/fetroshop-api/app/helper/validatorhelper"
	"github.com/BuildWithYou/fetroshop-api/app/middleware"
	"github.com/BuildWithYou/fetroshop-api/app/modules/cms"
	controller2 "github.com/BuildWithYou/fetroshop-api/app/modules/cms/controller"
	auth2 "github.com/BuildWithYou/fetroshop-api/app/modules/cms/service/auth"
	"github.com/BuildWithYou/fetroshop-api/app/modules/docs"
	"github.com/BuildWithYou/fetroshop-api/app/modules/web"
	"github.com/BuildWithYou/fetroshop-api/app/modules/web/controller"
	"github.com/BuildWithYou/fetroshop-api/app/modules/web/service/auth"
	"github.com/BuildWithYou/fetroshop-api/app/router"
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializeWebServer() error {
	viper := confighelper.GetConfig()
	docsDocs := docs.DocsProvider(viper)
	validate := validatorhelper.GetValidator()
	db := connection.OpenDBConnection(viper)
	customerRepo := postgres.CustomerRepoProvider(db)
	customerAccessRepo := postgres2.CustomerAccessRepoProvider(db)
	authService := auth.AuthServiceProvider(db, viper, validate, customerRepo, customerAccessRepo)
	authController := controller.AuthControllerProvider(validate, authService)
	controllerController := controller.WebControllerProvider(authController)
	userAccessRepo := postgres3.UserAccessRepoProvider(db)
	jwtMiddleware := middleware.JwtMiddlewareProvider(viper, userAccessRepo, customerAccessRepo)
	routerRouter := router.WebRouterProvider(docsDocs, controllerController, jwtMiddleware)
	serverConfig := web.WebServerConfigProvider(routerRouter)
	fiberApp := app.CreateFiber(serverConfig)
	error2 := app.StartFiber(fiberApp, serverConfig)
	return error2
}

func InitializeCmsServer() error {
	viper := confighelper.GetConfig()
	docsDocs := docs.DocsProvider(viper)
	db := connection.OpenDBConnection(viper)
	userAccessRepo := postgres3.UserAccessRepoProvider(db)
	customerAccessRepo := postgres2.CustomerAccessRepoProvider(db)
	jwtMiddleware := middleware.JwtMiddlewareProvider(viper, userAccessRepo, customerAccessRepo)
	validate := validatorhelper.GetValidator()
	userRepo := postgres4.UserRepoProvider(db)
	authService := auth2.AuthServiceProvider(db, viper, validate, userRepo, userAccessRepo)
	authController := controller2.AuthControllerProvider(authService)
	controllerController := controller2.CmsControllerProvider(authController)
	routerRouter := router.CmsRouterProvider(docsDocs, jwtMiddleware, controllerController)
	serverConfig := cms.CmsServerConfigProvider(routerRouter)
	fiberApp := app.CreateFiber(serverConfig)
	error2 := app.StartFiber(fiberApp, serverConfig)
	return error2
}

// injector.go:

var serverSet = wire.NewSet(confighelper.GetConfig, connection.OpenDBConnection, docs.DocsProvider, middleware.JwtMiddlewareProvider, validatorhelper.GetValidator, postgres3.UserAccessRepoProvider, postgres2.CustomerAccessRepoProvider, app.CreateFiber, app.StartFiber)

// web dependencies
var webRepoSet = wire.NewSet(postgres.CustomerRepoProvider)

var webControllerSet = wire.NewSet(controller.WebControllerProvider, controller.AuthControllerProvider)

var webServiceSet = wire.NewSet(auth.AuthServiceProvider)

// cms dependencies
var cmsRepoSet = wire.NewSet(postgres4.UserRepoProvider)

var cmsControllerSet = wire.NewSet(controller2.CmsControllerProvider, controller2.AuthControllerProvider)

var cmsServiceSet = wire.NewSet(auth2.AuthServiceProvider)
