// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/BuildWithYou/fetroshop-api/app"
	"github.com/BuildWithYou/fetroshop-api/app/connection"
	postgres6 "github.com/BuildWithYou/fetroshop-api/app/domain/brands/postgres"
	postgres5 "github.com/BuildWithYou/fetroshop-api/app/domain/categories/postgres"
	postgres9 "github.com/BuildWithYou/fetroshop-api/app/domain/cities/postgres"
	postgres2 "github.com/BuildWithYou/fetroshop-api/app/domain/customer_accesses/postgres"
	postgres4 "github.com/BuildWithYou/fetroshop-api/app/domain/customers/postgres"
	postgres10 "github.com/BuildWithYou/fetroshop-api/app/domain/districts/postgres"
	postgres8 "github.com/BuildWithYou/fetroshop-api/app/domain/provinces/postgres"
	postgres7 "github.com/BuildWithYou/fetroshop-api/app/domain/stores/postgres"
	postgres11 "github.com/BuildWithYou/fetroshop-api/app/domain/subdistricts/postgres"
	"github.com/BuildWithYou/fetroshop-api/app/domain/user_accesses/postgres"
	postgres3 "github.com/BuildWithYou/fetroshop-api/app/domain/users/postgres"
	"github.com/BuildWithYou/fetroshop-api/app/helper/confighelper"
	"github.com/BuildWithYou/fetroshop-api/app/helper/logger"
	"github.com/BuildWithYou/fetroshop-api/app/helper/miniohelper"
	"github.com/BuildWithYou/fetroshop-api/app/helper/validatorhelper"
	"github.com/BuildWithYou/fetroshop-api/app/middleware"
	"github.com/BuildWithYou/fetroshop-api/app/modules/cms"
	controller2 "github.com/BuildWithYou/fetroshop-api/app/modules/cms/controller"
	"github.com/BuildWithYou/fetroshop-api/app/modules/docs"
	"github.com/BuildWithYou/fetroshop-api/app/modules/web"
	"github.com/BuildWithYou/fetroshop-api/app/modules/web/controller"
	"github.com/BuildWithYou/fetroshop-api/app/service/auth"
	"github.com/BuildWithYou/fetroshop-api/app/service/brand"
	"github.com/BuildWithYou/fetroshop-api/app/service/category"
	"github.com/BuildWithYou/fetroshop-api/app/service/location"
	"github.com/BuildWithYou/fetroshop-api/app/service/product"
	"github.com/BuildWithYou/fetroshop-api/app/service/store"
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializeWebServer() *app.Fetroshop {
	viper := confighelper.GetConfig()
	docsDocs := docs.DocsProvider(viper)
	connectionDBType := _wireDBTypeValue
	loggerLogger := logger.NewWebLogger(viper)
	connectionConnection := connection.OpenDBConnection(connectionDBType, viper, loggerLogger)
	userAccessRepo := postgres.RepoProvider(connectionConnection)
	customerAccessRepo := postgres2.RepoProvider(connectionConnection)
	jwtMiddleware := middleware.JwtMiddlewareProvider(viper, userAccessRepo, customerAccessRepo, loggerLogger)
	dbMiddleware := middleware.DBMiddlewareProvider(connectionConnection, loggerLogger)
	validate := validatorhelper.GetValidator()
	userRepo := postgres3.RepoProvider(connectionConnection)
	customerRepo := postgres4.RepoProvider(connectionConnection)
	authService := auth.ServiceProvider(connectionConnection, viper, validate, userRepo, userAccessRepo, customerRepo, customerAccessRepo, loggerLogger)
	authController := controller.AuthControllerProvider(validate, authService)
	categoryRepo := postgres5.RepoProvider(connectionConnection)
	categoryService := category.ServiceProvider(connectionConnection, viper, validate, loggerLogger, categoryRepo)
	categoryController := controller.CategoryControllerProvider(validate, categoryService)
	brandRepo := postgres6.RepoProvider(connectionConnection)
	brandService := brand.ServiceProvider(connectionConnection, viper, validate, loggerLogger, brandRepo)
	brandController := controller.BrandControllerProvider(validate, brandService)
	storeRepo := postgres7.RepoProvider(connectionConnection)
	provinceRepo := postgres8.RepoProvider(connectionConnection)
	cityRepo := postgres9.RepoProvider(connectionConnection)
	districtRepo := postgres10.RepoProvider(connectionConnection)
	subdistrictRepo := postgres11.RepoProvider(connectionConnection)
	minio := miniohelper.GetMinio(viper, loggerLogger)
	storeService := store.ServiceProvider(connectionConnection, viper, validate, storeRepo, provinceRepo, cityRepo, districtRepo, subdistrictRepo, loggerLogger, minio)
	storeController := controller.StoreControllerProvider(validate, storeService)
	locationService := location.ServiceProvider(connectionConnection, viper, validate, loggerLogger, provinceRepo, cityRepo, districtRepo, subdistrictRepo)
	locationController := controller.LocationControllerProvider(validate, locationService)
	controllerController := controller.WebControllerProvider(authController, categoryController, brandController, storeController, locationController)
	router := web.RouterProvider(docsDocs, jwtMiddleware, dbMiddleware, controllerController, loggerLogger)
	serverConfig := web.WebServerConfigProvider(router, loggerLogger)
	fetroshop := app.CreateFiber(serverConfig)
	return fetroshop
}

var (
	_wireDBTypeValue = dbType
)

func InitializeCmsServer() *app.Fetroshop {
	viper := confighelper.GetConfig()
	docsDocs := docs.DocsProvider(viper)
	connectionDBType := _wireDBTypeValue
	loggerLogger := logger.NewCmsLogger(viper)
	connectionConnection := connection.OpenDBConnection(connectionDBType, viper, loggerLogger)
	userAccessRepo := postgres.RepoProvider(connectionConnection)
	customerAccessRepo := postgres2.RepoProvider(connectionConnection)
	jwtMiddleware := middleware.JwtMiddlewareProvider(viper, userAccessRepo, customerAccessRepo, loggerLogger)
	dbMiddleware := middleware.DBMiddlewareProvider(connectionConnection, loggerLogger)
	validate := validatorhelper.GetValidator()
	userRepo := postgres3.RepoProvider(connectionConnection)
	customerRepo := postgres4.RepoProvider(connectionConnection)
	authService := auth.ServiceProvider(connectionConnection, viper, validate, userRepo, userAccessRepo, customerRepo, customerAccessRepo, loggerLogger)
	authController := controller2.AuthControllerProvider(authService)
	categoryRepo := postgres5.RepoProvider(connectionConnection)
	categoryService := category.ServiceProvider(connectionConnection, viper, validate, loggerLogger, categoryRepo)
	categoryController := controller2.CategoryControllerProvider(validate, categoryService)
	brandRepo := postgres6.RepoProvider(connectionConnection)
	brandService := brand.ServiceProvider(connectionConnection, viper, validate, loggerLogger, brandRepo)
	brandController := controller2.BrandControllerProvider(validate, brandService)
	storeRepo := postgres7.RepoProvider(connectionConnection)
	provinceRepo := postgres8.RepoProvider(connectionConnection)
	cityRepo := postgres9.RepoProvider(connectionConnection)
	districtRepo := postgres10.RepoProvider(connectionConnection)
	subdistrictRepo := postgres11.RepoProvider(connectionConnection)
	minio := miniohelper.GetMinio(viper, loggerLogger)
	storeService := store.ServiceProvider(connectionConnection, viper, validate, storeRepo, provinceRepo, cityRepo, districtRepo, subdistrictRepo, loggerLogger, minio)
	storeController := controller2.StoreControllerProvider(validate, storeService)
	locationService := location.ServiceProvider(connectionConnection, viper, validate, loggerLogger, provinceRepo, cityRepo, districtRepo, subdistrictRepo)
	locationController := controller2.LocationControllerProvider(validate, locationService)
	productService := product.ServiceProvider(connectionConnection, viper, validate, loggerLogger, minio)
	productController := controller2.ProductControllerProvider(validate, productService)
	controllerController := controller2.CmsControllerProvider(authController, categoryController, brandController, storeController, locationController, productController)
	router := cms.RouterProvider(docsDocs, jwtMiddleware, dbMiddleware, controllerController, loggerLogger)
	serverConfig := cms.CmsServerConfigProvider(router, loggerLogger)
	fetroshop := app.CreateFiber(serverConfig)
	return fetroshop
}

// injector.go:

var dbType connection.DBType = connection.DB_MAIN

var repoSet = wire.NewSet(postgres4.RepoProvider, postgres2.RepoProvider, postgres3.RepoProvider, postgres.RepoProvider, postgres5.RepoProvider, postgres6.RepoProvider, postgres7.RepoProvider, postgres8.RepoProvider, postgres9.RepoProvider, postgres10.RepoProvider, postgres11.RepoProvider)

var serviceSet = wire.NewSet(auth.ServiceProvider, category.ServiceProvider, brand.ServiceProvider, store.ServiceProvider, location.ServiceProvider, product.ServiceProvider)

var serverSet = wire.NewSet(wire.Value(dbType), confighelper.GetConfig, connection.OpenDBConnection, docs.DocsProvider, middleware.JwtMiddlewareProvider, middleware.DBMiddlewareProvider, validatorhelper.GetValidator, miniohelper.GetMinio, repoSet,
	serviceSet, app.CreateFiber,
)

// web dependencies
var webControllerSet = wire.NewSet(controller.WebControllerProvider, controller.AuthControllerProvider, controller.CategoryControllerProvider, controller.BrandControllerProvider, controller.StoreControllerProvider, controller.LocationControllerProvider)

// cms dependencies
var cmsControllerSet = wire.NewSet(controller2.CmsControllerProvider, controller2.AuthControllerProvider, controller2.CategoryControllerProvider, controller2.BrandControllerProvider, controller2.StoreControllerProvider, controller2.LocationControllerProvider, controller2.ProductControllerProvider)
