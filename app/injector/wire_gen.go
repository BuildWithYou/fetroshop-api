// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/BuildWithYou/fetroshop-api/app"
	"github.com/BuildWithYou/fetroshop-api/app/connection"
	"github.com/BuildWithYou/fetroshop-api/app/domain/customers/postgres"
	postgres2 "github.com/BuildWithYou/fetroshop-api/app/domain/users/postgres"
	"github.com/BuildWithYou/fetroshop-api/app/helper/confighelper"
	"github.com/BuildWithYou/fetroshop-api/app/helper/validatorhelper"
	"github.com/BuildWithYou/fetroshop-api/app/middleware"
	"github.com/BuildWithYou/fetroshop-api/app/modules/cms"
	"github.com/BuildWithYou/fetroshop-api/app/modules/docs"
	"github.com/BuildWithYou/fetroshop-api/app/modules/web"
	"github.com/BuildWithYou/fetroshop-api/app/modules/web/controller"
	"github.com/BuildWithYou/fetroshop-api/app/modules/web/service/auth"
	"github.com/BuildWithYou/fetroshop-api/app/router"
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializeWebServer() error {
	viper := confighelper.GetConfig()
	docsDocs := docs.DocsProvider(viper)
	validate := validatorhelper.GetValidator()
	db := connection.OpenDBConnection(viper)
	customerRepository := postgres.CustomerRepositoryProvider(db)
	authService := auth.AuthServiceProvider(db, viper, customerRepository)
	authController := controller.AuthControllerProvider(validate, authService)
	jwtMiddleware := middleware.JwtMiddlewareProvider(viper)
	routerRouter := router.WebRouterProvider(docsDocs, authController, jwtMiddleware)
	serverConfig := web.WebServerConfigProvider(routerRouter)
	fiberApp := app.CreateFiber(serverConfig)
	error2 := app.StartFiber(fiberApp, serverConfig)
	return error2
}

func InitializeCmsServer() error {
	viper := confighelper.GetConfig()
	docsDocs := docs.DocsProvider(viper)
	jwtMiddleware := middleware.JwtMiddlewareProvider(viper)
	routerRouter := router.CmsRouterProvider(docsDocs, jwtMiddleware)
	serverConfig := cms.CmsServerConfigProvider(routerRouter)
	fiberApp := app.CreateFiber(serverConfig)
	error2 := app.StartFiber(fiberApp, serverConfig)
	return error2
}

// injector.go:

var serverSet = wire.NewSet(confighelper.GetConfig, docs.DocsProvider, middleware.JwtMiddlewareProvider, app.CreateFiber, app.StartFiber)

var userSet = wire.NewSet(postgres2.UserRepositoryProvider, auth.AuthServiceProvider, controller.AuthControllerProvider)

var customerSet = wire.NewSet(postgres.CustomerRepositoryProvider, auth.AuthServiceProvider, controller.AuthControllerProvider)
