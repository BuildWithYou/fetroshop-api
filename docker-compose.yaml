version: "3.7"
services:
   api:
      build:
         context: ./
         dockerfile: fetroshop-api.Dockerfile
      image: fetroshop-api
      container_name: fetroshop-api
      restart: no # available options: no, always, on-failure, unless-stopped, on-abnormal
      working_dir: /app
      ports:
         - ${API_PORT_WEB}:3000
         - ${API_PORT_CMS}:3001
      networks:
         - fetroshop_network
      volumes:
         - api_volume:/app
      depends_on:
         db:
            condition: service_healthy
         minio:
            condition: service_healthy
      links:
         - "db"
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:${API_PORT_WEB}/welcome"]
         interval: 30s
         timeout: 10s
         retries: 5
   db:
      build:
         context: ./
         dockerfile: postgres.Dockerfile
      image: fetroshop-db
      container_name: fetroshop-db
      restart: no # available options: no, always, on-failure, unless-stopped, on-abnormal
      working_dir: /
      environment:
         POSTGRES_PASSWORD: postgres
         PGDATA: /var/lib/postgresql/data/pgdata
      ports:
         - ${DB_PORT}:5432
      volumes:
         - db_volume:/var/lib/postgresql/data
         - migrate_volume:/db
      networks:
         - fetroshop_network
      healthcheck:
         test: ["CMD-SHELL", "pg_isready -U postgres"]
         interval: 10s
         timeout: 5s
         retries: 5
   migrate1:
      image: migrate/migrate
      container_name: migrate1
      command: ${MIGRATE_COMMAND1}
      volumes:
         - migrate_volume:/db
      depends_on:
         db:
            condition: service_healthy
      networks:
         - fetroshop_network
   migrate2:
      image: migrate/migrate
      container_name: migrate2
      command: ${MIGRATE_COMMAND2}
      volumes:
         - migrate_volume:/db
      depends_on:
         db:
            condition: service_healthy
      networks:
         - fetroshop_network
   web:
      build:
         context: ./
         dockerfile: fetroshop-web.Dockerfile
      image: fetroshop-web
      container_name: fetroshop-web
      restart: no # available options: no, always, on-failure, unless-stopped, on-abnormal
      working_dir: /app
      ports:
         - ${WEB_PORT}:3003
      networks:
         - fetroshop_network
      volumes:
         - web_volume:/app
      depends_on:
         api:
            condition: service_healthy
      links:
         - "api"
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:${WEB_PORT}"]
         interval: 30s
         timeout: 10s
         retries: 5         
   minio:
      image: minio/minio
      container_name: minio
      ports:
         - ${MINIO_PORT_SERVICE}:9000
         - ${MINIO_PORT_CONSOLE}:9001
      networks:
         - fetroshop_network
      environment:
         MINIO_ROOT_USER: ${MINIO_ROOT_USER}
         MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      volumes:
         - minio_data:/data
      command: server /data --console-address ":${MINIO_PORT_CONSOLE}"
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
         interval: 30s
         timeout: 10s
         retries: 3
      restart: unless-stopped
volumes:
   api_volume:
   web_volume:
   db_volume:
   migrate_volume:
   minio_data:
networks:
   fetroshop_network:
      driver: bridge
